version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15
    container_name: stock_analysis_db
    environment:
      POSTGRES_DB: stock_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stock_network

  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: stock_analysis_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_network

  # FastAPI 後端服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock_analysis_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stock_analysis
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
    networks:
      - stock_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React 前端應用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock_analysis_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - stock_network
    command: npm run dev

  # Apache Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.8.0
    container_name: stock_analysis_airflow_webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/stock_analysis
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here-32-chars-long
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DEFAULT_TIMEZONE=Asia/Taipei
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stock_analysis
      - REDIS_URL=redis://redis:6379
      - BACKEND_API_URL=http://backend:8000/api/v1
      - PYTHONPATH=/opt/airflow/dags:/opt/airflow:/opt/airflow/backend
    ports:
      - "8081:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
      - ./backend:/opt/airflow/backend
    depends_on:
      - postgres
      - redis
    networks:
      - stock_network
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
        airflow webserver --port 8080
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.8.0
    container_name: stock_analysis_airflow_scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/stock_analysis
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here-32-chars-long
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DEFAULT_TIMEZONE=Asia/Taipei
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stock_analysis
      - REDIS_URL=redis://redis:6379
      - BACKEND_API_URL=http://backend:8000/api/v1
      - PYTHONPATH=/opt/airflow/dags:/opt/airflow:/opt/airflow/backend
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
      - ./backend:/opt/airflow/backend
    depends_on:
      - postgres
      - redis
      - airflow-webserver
    networks:
      - stock_network
    command: airflow scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  stock_network:
    driver: bridge